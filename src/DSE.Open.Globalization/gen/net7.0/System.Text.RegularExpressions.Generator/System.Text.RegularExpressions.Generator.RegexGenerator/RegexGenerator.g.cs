// <auto-generated/>
#nullable enable
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // Unreferenced label
#pragma warning disable CS0219 // Variable assigned but never used

namespace DSE.Open.Globalization
{
    partial struct LanguageTag
    {
        /// <remarks>
        /// Pattern explanation:<br/>
        /// <code>
        /// ○ Match if at the beginning of the string.<br/>
        /// ○ 1st capture group.<br/>
        ///     ○ Match with 4 alternative expressions.<br/>
        ///         ○ 2nd capture group.<br/>
        ///             ○ Match with 3 alternative expressions.<br/>
        ///                 ○ Match the string "en-GB-oed".<br/>
        ///                 ○ Match a sequence of expressions.<br/>
        ///                     ○ Match the string "i-".<br/>
        ///                     ○ Match with 11 alternative expressions.<br/>
        ///                         ○ Match the string "ami".<br/>
        ///                         ○ Match the string "bnn".<br/>
        ///                         ○ Match the string "default".<br/>
        ///                         ○ Match the string "enochian".<br/>
        ///                         ○ Match the string "hak".<br/>
        ///                         ○ Match the string "klingon".<br/>
        ///                         ○ Match the string "lux".<br/>
        ///                         ○ Match the string "mingo".<br/>
        ///                         ○ Match the string "navajo".<br/>
        ///                         ○ Match the string "pwn".<br/>
        ///                         ○ Match a sequence of expressions.<br/>
        ///                             ○ Match 't'.<br/>
        ///                             ○ Match with 2 alternative expressions.<br/>
        ///                                 ○ Match a sequence of expressions.<br/>
        ///                                     ○ Match 'a'.<br/>
        ///                                     ○ Match a character in the set [oy].<br/>
        ///                                 ○ Match the string "su".<br/>
        ///                 ○ Match a sequence of expressions.<br/>
        ///                     ○ Match the string "sgn-".<br/>
        ///                     ○ Match with 2 alternative expressions.<br/>
        ///                         ○ Match a sequence of expressions.<br/>
        ///                             ○ Match the string "BE-".<br/>
        ///                             ○ Match with 2 alternative expressions.<br/>
        ///                                 ○ Match the string "FR".<br/>
        ///                                 ○ Match the string "NL".<br/>
        ///                         ○ Match the string "CH-DE".<br/>
        ///         ○ 3rd capture group.<br/>
        ///             ○ Match with 4 alternative expressions.<br/>
        ///                 ○ Match the string "art-lojban".<br/>
        ///                 ○ Match the string "cel-gaulish".<br/>
        ///                 ○ Match a sequence of expressions.<br/>
        ///                     ○ Match the string "no-".<br/>
        ///                     ○ Match with 2 alternative expressions.<br/>
        ///                         ○ Match the string "bok".<br/>
        ///                         ○ Match the string "nyn".<br/>
        ///                 ○ Match a sequence of expressions.<br/>
        ///                     ○ Match the string "zh-".<br/>
        ///                     ○ Match with 4 alternative expressions.<br/>
        ///                         ○ Match the string "guoyu".<br/>
        ///                         ○ Match the string "hakka".<br/>
        ///                         ○ Match a sequence of expressions.<br/>
        ///                             ○ Match the string "min".<br/>
        ///                             ○ Match with 2 alternative expressions.<br/>
        ///                                 ○ Match an empty string.<br/>
        ///                                 ○ Match the string "-nan".<br/>
        ///                         ○ Match the string "xiang".<br/>
        ///         ○ 4th capture group.<br/>
        ///             ○ Match with 3 alternative expressions.<br/>
        ///                 ○ 5th capture group.<br/>
        ///                     ○ Match a character in the set [A-Za-z] greedily at least 2 and at most 3 times.<br/>
        ///                     ○ Optional (greedy).<br/>
        ///                         ○ 6th capture group.<br/>
        ///                             ○ Match '-'.<br/>
        ///                             ○ Match a character in the set [A-Za-z] exactly 3 times.<br/>
        ///                             ○ Loop greedily at most 2 times.<br/>
        ///                                 ○ 7th capture group.<br/>
        ///                                     ○ Match '-'.<br/>
        ///                                     ○ Match a character in the set [A-Za-z] exactly 3 times.<br/>
        ///                 ○ Match a character in the set [A-Za-z] exactly 4 times.<br/>
        ///                 ○ Match a character in the set [A-Za-z] greedily at least 5 and at most 8 times.<br/>
        ///             ○ Optional (greedy).<br/>
        ///                 ○ 8th capture group.<br/>
        ///                     ○ Match '-'.<br/>
        ///                     ○ Match a character in the set [A-Za-z] exactly 4 times.<br/>
        ///             ○ Optional (greedy).<br/>
        ///                 ○ 9th capture group.<br/>
        ///                     ○ Match '-'.<br/>
        ///                     ○ Match with 2 alternative expressions.<br/>
        ///                         ○ Match a character in the set [A-Za-z] exactly 2 times.<br/>
        ///                         ○ Match '0' through '9' exactly 3 times.<br/>
        ///             ○ Loop greedily any number of times.<br/>
        ///                 ○ 10th capture group.<br/>
        ///                     ○ Match '-'.<br/>
        ///                     ○ Match with 2 alternative expressions.<br/>
        ///                         ○ Match a character in the set [0-9A-Za-z] greedily at least 5 and at most 8 times.<br/>
        ///                         ○ Match a sequence of expressions.<br/>
        ///                             ○ Match '0' through '9'.<br/>
        ///                             ○ Match a character in the set [0-9A-Za-z] exactly 3 times.<br/>
        ///             ○ Loop greedily any number of times.<br/>
        ///                 ○ 11th capture group.<br/>
        ///                     ○ Match '-'.<br/>
        ///                     ○ Match a character in the set [0-9A-WYZa-wyz].<br/>
        ///                     ○ Loop greedily at least once.<br/>
        ///                         ○ 12th capture group.<br/>
        ///                             ○ Match '-'.<br/>
        ///                             ○ Match a character in the set [0-9A-Za-z] greedily at least 2 and at most 8 times.<br/>
        ///             ○ Optional (greedy).<br/>
        ///                 ○ 13th capture group.<br/>
        ///                     ○ Match the string "-x".<br/>
        ///                     ○ Loop greedily at least once.<br/>
        ///                         ○ 14th capture group.<br/>
        ///                             ○ Match '-'.<br/>
        ///                             ○ Match a character in the set [0-9A-Za-z] greedily at least 1 and at most 8 times.<br/>
        ///         ○ Match a sequence of expressions.<br/>
        ///             ○ Match 'x'.<br/>
        ///             ○ Loop greedily at least once.<br/>
        ///                 ○ 15th capture group.<br/>
        ///                     ○ Match '-'.<br/>
        ///                     ○ Match a character in the set [0-9A-Za-z] atomically at least 1 and at most 8 times.<br/>
        /// ○ Match if at the end of the string or if before an ending newline.<br/>
        /// </code>
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.8.17405")]
        private static partial global::System.Text.RegularExpressions.Regex GetValidationRegex() => global::System.Text.RegularExpressions.Generated.GetValidationRegex_0.Instance;
    }
}

namespace System.Text.RegularExpressions.Generated
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections;
    using System.ComponentModel;
    using System.Globalization;
    using System.Runtime.CompilerServices;
    using System.Text.RegularExpressions;
    using System.Threading;

    /// <summary>Custom <see cref="Regex"/>-derived type for the GetValidationRegex method.</summary>
    [GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.8.17405")]
    file sealed class GetValidationRegex_0 : Regex
    {
        /// <summary>Cached, thread-safe singleton instance.</summary>
        internal static readonly GetValidationRegex_0 Instance = new();
    
        /// <summary>Initializes the instance.</summary>
        private GetValidationRegex_0()
        {
            base.pattern = "^((?:(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?:([A-Za-z]{2,3}(-(?:[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?:[A-Za-z]{4}))?(-(?:[A-Za-z]{2}|[0-9]{3}))?(-(?:[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?:[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?:x(-[A-Za-z0-9]{1,8})+))?)|(?:x(-[A-Za-z0-9]{1,8})+))$";
            base.roptions = RegexOptions.Compiled;
            ValidateMatchTimeout(Utilities.s_defaultTimeout);
            base.internalMatchTimeout = Utilities.s_defaultTimeout;
            base.factory = new RunnerFactory();
            base.capsize = 16;
        }
    
        /// <summary>Provides a factory for creating <see cref="RegexRunner"/> instances to be used by methods on <see cref="Regex"/>.</summary>
        private sealed class RunnerFactory : RegexRunnerFactory
        {
            /// <summary>Creates an instance of a <see cref="RegexRunner"/> used by methods on <see cref="Regex"/>.</summary>
            protected override RegexRunner CreateInstance() => new Runner();
        
            /// <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
            private sealed class Runner : RegexRunner
            {
                /// <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
                /// <param name="inputSpan">The text being scanned by the regular expression.</param>
                protected override void Scan(ReadOnlySpan<char> inputSpan)
                {
                    // The pattern is anchored.  Validate the current position and try to match at it only.
                    if (TryFindNextPossibleStartingPosition(inputSpan) && !TryMatchAtCurrentPosition(inputSpan))
                    {
                        base.runtextpos = inputSpan.Length;
                    }
                }
        
                /// <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
                /// <param name="inputSpan">The text being scanned by the regular expression.</param>
                /// <returns>true if a possible match was found; false if no more matches are possible.</returns>
                private bool TryFindNextPossibleStartingPosition(ReadOnlySpan<char> inputSpan)
                {
                    int pos = base.runtextpos;
                    
                    // Any possible match is at least 2 characters.
                    if (pos <= inputSpan.Length - 2)
                    {
                        // The pattern leads with a beginning (\A) anchor.
                        if (pos == 0)
                        {
                            return true;
                        }
                    }
                    
                    // No match found.
                    base.runtextpos = inputSpan.Length;
                    return false;
                }
        
                /// <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
                /// <param name="inputSpan">The text being scanned by the regular expression.</param>
                /// <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
                private bool TryMatchAtCurrentPosition(ReadOnlySpan<char> inputSpan)
                {
                    int pos = base.runtextpos;
                    int matchStart = pos;
                    char ch;
                    int alternation_branch = 0;
                    int alternation_branch1 = 0;
                    int alternation_branch2 = 0;
                    int alternation_branch3 = 0;
                    int alternation_branch4 = 0;
                    int alternation_branch5 = 0;
                    int alternation_branch6 = 0;
                    int alternation_branch7 = 0;
                    int alternation_starting_capturepos = 0;
                    int alternation_starting_capturepos1 = 0;
                    int alternation_starting_capturepos2 = 0;
                    int alternation_starting_capturepos3 = 0;
                    int alternation_starting_capturepos4 = 0;
                    int alternation_starting_capturepos5 = 0;
                    int alternation_starting_capturepos6 = 0;
                    int alternation_starting_capturepos7 = 0;
                    int alternation_starting_pos = 0;
                    int alternation_starting_pos1 = 0;
                    int alternation_starting_pos2 = 0;
                    int alternation_starting_pos3 = 0;
                    int alternation_starting_pos4 = 0;
                    int alternation_starting_pos5 = 0;
                    int alternation_starting_pos6 = 0;
                    int alternation_starting_pos7 = 0;
                    int capture_starting_pos = 0;
                    int capture_starting_pos1 = 0;
                    int capture_starting_pos2 = 0;
                    int capture_starting_pos3 = 0;
                    int capture_starting_pos4 = 0;
                    int charloop_capture_pos = 0;
                    int charloop_capture_pos1 = 0;
                    int charloop_starting_pos = 0, charloop_ending_pos = 0;
                    int charloop_starting_pos1 = 0, charloop_ending_pos1 = 0;
                    int charloop_starting_pos2 = 0, charloop_ending_pos2 = 0;
                    int charloop_starting_pos3 = 0, charloop_ending_pos3 = 0;
                    int charloop_starting_pos4 = 0, charloop_ending_pos4 = 0;
                    int loop_iteration = 0;
                    int loop_iteration1 = 0;
                    int loop_iteration2 = 0;
                    int loop_iteration3 = 0;
                    int loop_iteration4 = 0;
                    int loop_iteration5 = 0;
                    int loop_iteration6 = 0;
                    int loop_iteration7 = 0;
                    int loop_iteration8 = 0;
                    int loop_iteration9 = 0;
                    int stackpos = 0;
                    ReadOnlySpan<char> slice = inputSpan.Slice(pos);
                    
                    // Match if at the beginning of the string.
                    if (pos != 0)
                    {
                        UncaptureUntil(0);
                        return false; // The input didn't match.
                    }
                    
                    // 1st capture group.
                    //{
                        capture_starting_pos = pos;
                        
                        // Match with 4 alternative expressions.
                        //{
                            alternation_starting_pos = pos;
                            alternation_starting_capturepos = base.Crawlpos();
                            
                            // Branch 0
                            //{
                                // 2nd capture group.
                                //{
                                    capture_starting_pos1 = pos;
                                    
                                    // Match with 3 alternative expressions.
                                    //{
                                        alternation_starting_pos1 = pos;
                                        alternation_starting_capturepos1 = base.Crawlpos();
                                        
                                        // Branch 0
                                        //{
                                            // Match the string "en-GB-oed".
                                            if (!slice.StartsWith("en-GB-oed"))
                                            {
                                                goto AlternationBranch1;
                                            }
                                            
                                            alternation_branch1 = 0;
                                            pos += 9;
                                            slice = inputSpan.Slice(pos);
                                            goto AlternationMatch1;
                                            
                                            AlternationBranch1:
                                            pos = alternation_starting_pos1;
                                            slice = inputSpan.Slice(pos);
                                            UncaptureUntil(alternation_starting_capturepos1);
                                        //}
                                        
                                        // Branch 1
                                        //{
                                            // Match the string "i-".
                                            if (!slice.StartsWith("i-"))
                                            {
                                                goto AlternationBranch2;
                                            }
                                            
                                            // Match with 11 alternative expressions.
                                            //{
                                                alternation_starting_pos2 = pos;
                                                alternation_starting_capturepos2 = base.Crawlpos();
                                                
                                                // Branch 0
                                                //{
                                                    // Match the string "ami".
                                                    if (!slice.Slice(2).StartsWith("ami"))
                                                    {
                                                        goto AlternationBranch3;
                                                    }
                                                    
                                                    alternation_branch2 = 0;
                                                    pos += 5;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch2;
                                                    
                                                    AlternationBranch3:
                                                    pos = alternation_starting_pos2;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos2);
                                                //}
                                                
                                                // Branch 1
                                                //{
                                                    // Match the string "bnn".
                                                    if (!slice.Slice(2).StartsWith("bnn"))
                                                    {
                                                        goto AlternationBranch4;
                                                    }
                                                    
                                                    alternation_branch2 = 1;
                                                    pos += 5;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch2;
                                                    
                                                    AlternationBranch4:
                                                    pos = alternation_starting_pos2;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos2);
                                                //}
                                                
                                                // Branch 2
                                                //{
                                                    // Match the string "default".
                                                    if (!slice.Slice(2).StartsWith("default"))
                                                    {
                                                        goto AlternationBranch5;
                                                    }
                                                    
                                                    alternation_branch2 = 2;
                                                    pos += 9;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch2;
                                                    
                                                    AlternationBranch5:
                                                    pos = alternation_starting_pos2;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos2);
                                                //}
                                                
                                                // Branch 3
                                                //{
                                                    // Match the string "enochian".
                                                    if (!slice.Slice(2).StartsWith("enochian"))
                                                    {
                                                        goto AlternationBranch6;
                                                    }
                                                    
                                                    alternation_branch2 = 3;
                                                    pos += 10;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch2;
                                                    
                                                    AlternationBranch6:
                                                    pos = alternation_starting_pos2;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos2);
                                                //}
                                                
                                                // Branch 4
                                                //{
                                                    // Match the string "hak".
                                                    if (!slice.Slice(2).StartsWith("hak"))
                                                    {
                                                        goto AlternationBranch7;
                                                    }
                                                    
                                                    alternation_branch2 = 4;
                                                    pos += 5;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch2;
                                                    
                                                    AlternationBranch7:
                                                    pos = alternation_starting_pos2;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos2);
                                                //}
                                                
                                                // Branch 5
                                                //{
                                                    // Match the string "klingon".
                                                    if (!slice.Slice(2).StartsWith("klingon"))
                                                    {
                                                        goto AlternationBranch8;
                                                    }
                                                    
                                                    alternation_branch2 = 5;
                                                    pos += 9;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch2;
                                                    
                                                    AlternationBranch8:
                                                    pos = alternation_starting_pos2;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos2);
                                                //}
                                                
                                                // Branch 6
                                                //{
                                                    // Match the string "lux".
                                                    if (!slice.Slice(2).StartsWith("lux"))
                                                    {
                                                        goto AlternationBranch9;
                                                    }
                                                    
                                                    alternation_branch2 = 6;
                                                    pos += 5;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch2;
                                                    
                                                    AlternationBranch9:
                                                    pos = alternation_starting_pos2;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos2);
                                                //}
                                                
                                                // Branch 7
                                                //{
                                                    // Match the string "mingo".
                                                    if (!slice.Slice(2).StartsWith("mingo"))
                                                    {
                                                        goto AlternationBranch10;
                                                    }
                                                    
                                                    alternation_branch2 = 7;
                                                    pos += 7;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch2;
                                                    
                                                    AlternationBranch10:
                                                    pos = alternation_starting_pos2;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos2);
                                                //}
                                                
                                                // Branch 8
                                                //{
                                                    // Match the string "navajo".
                                                    if (!slice.Slice(2).StartsWith("navajo"))
                                                    {
                                                        goto AlternationBranch11;
                                                    }
                                                    
                                                    alternation_branch2 = 8;
                                                    pos += 8;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch2;
                                                    
                                                    AlternationBranch11:
                                                    pos = alternation_starting_pos2;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos2);
                                                //}
                                                
                                                // Branch 9
                                                //{
                                                    // Match the string "pwn".
                                                    if (!slice.Slice(2).StartsWith("pwn"))
                                                    {
                                                        goto AlternationBranch12;
                                                    }
                                                    
                                                    alternation_branch2 = 9;
                                                    pos += 5;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch2;
                                                    
                                                    AlternationBranch12:
                                                    pos = alternation_starting_pos2;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos2);
                                                //}
                                                
                                                // Branch 10
                                                //{
                                                    // Match 't'.
                                                    if ((uint)slice.Length < 3 || slice[2] != 't')
                                                    {
                                                        goto AlternationBranch2;
                                                    }
                                                    
                                                    // Match with 2 alternative expressions.
                                                    //{
                                                        if ((uint)slice.Length < 4)
                                                        {
                                                            goto AlternationBranch2;
                                                        }
                                                        
                                                        switch (slice[3])
                                                        {
                                                            case 'a':
                                                                // Match a character in the set [oy].
                                                                if ((uint)slice.Length < 5 || (((ch = slice[4]) != 'o') & (ch != 'y')))
                                                                {
                                                                    goto AlternationBranch2;
                                                                }
                                                                
                                                                pos += 5;
                                                                slice = inputSpan.Slice(pos);
                                                                break;
                                                                
                                                            case 's':
                                                                // Match 'u'.
                                                                if ((uint)slice.Length < 5 || slice[4] != 'u')
                                                                {
                                                                    goto AlternationBranch2;
                                                                }
                                                                
                                                                pos += 5;
                                                                slice = inputSpan.Slice(pos);
                                                                break;
                                                                
                                                            default:
                                                                goto AlternationBranch2;
                                                        }
                                                    //}
                                                    
                                                    alternation_branch2 = 10;
                                                    goto AlternationMatch2;
                                                //}
                                                
                                                AlternationBacktrack2:
                                                if (Utilities.s_hasTimeout)
                                                {
                                                    base.CheckTimeout();
                                                }
                                                
                                                switch (alternation_branch2)
                                                {
                                                    case 0:
                                                        goto AlternationBranch3;
                                                    case 1:
                                                        goto AlternationBranch4;
                                                    case 2:
                                                        goto AlternationBranch5;
                                                    case 3:
                                                        goto AlternationBranch6;
                                                    case 4:
                                                        goto AlternationBranch7;
                                                    case 5:
                                                        goto AlternationBranch8;
                                                    case 6:
                                                        goto AlternationBranch9;
                                                    case 7:
                                                        goto AlternationBranch10;
                                                    case 8:
                                                        goto AlternationBranch11;
                                                    case 9:
                                                        goto AlternationBranch12;
                                                    case 10:
                                                        goto AlternationBranch2;
                                                }
                                                
                                                AlternationMatch2:;
                                            //}
                                            
                                            alternation_branch1 = 1;
                                            goto AlternationMatch1;
                                            
                                            AlternationBranch2:
                                            pos = alternation_starting_pos1;
                                            slice = inputSpan.Slice(pos);
                                            UncaptureUntil(alternation_starting_capturepos1);
                                        //}
                                        
                                        // Branch 2
                                        //{
                                            // Match the string "sgn-".
                                            if (!slice.StartsWith("sgn-"))
                                            {
                                                goto AlternationBranch;
                                            }
                                            
                                            // Match with 2 alternative expressions.
                                            //{
                                                alternation_starting_pos3 = pos;
                                                alternation_starting_capturepos3 = base.Crawlpos();
                                                
                                                // Branch 0
                                                //{
                                                    // Match the string "BE-".
                                                    if (!slice.Slice(4).StartsWith("BE-"))
                                                    {
                                                        goto AlternationBranch13;
                                                    }
                                                    
                                                    // Match with 2 alternative expressions.
                                                    //{
                                                        if ((uint)slice.Length < 8)
                                                        {
                                                            goto AlternationBranch13;
                                                        }
                                                        
                                                        switch (slice[7])
                                                        {
                                                            case 'F':
                                                                // Match 'R'.
                                                                if ((uint)slice.Length < 9 || slice[8] != 'R')
                                                                {
                                                                    goto AlternationBranch13;
                                                                }
                                                                
                                                                pos += 9;
                                                                slice = inputSpan.Slice(pos);
                                                                break;
                                                                
                                                            case 'N':
                                                                // Match 'L'.
                                                                if ((uint)slice.Length < 9 || slice[8] != 'L')
                                                                {
                                                                    goto AlternationBranch13;
                                                                }
                                                                
                                                                pos += 9;
                                                                slice = inputSpan.Slice(pos);
                                                                break;
                                                                
                                                            default:
                                                                goto AlternationBranch13;
                                                        }
                                                    //}
                                                    
                                                    alternation_branch3 = 0;
                                                    goto AlternationMatch3;
                                                    
                                                    AlternationBranch13:
                                                    pos = alternation_starting_pos3;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos3);
                                                //}
                                                
                                                // Branch 1
                                                //{
                                                    // Match the string "CH-DE".
                                                    if (!slice.Slice(4).StartsWith("CH-DE"))
                                                    {
                                                        goto AlternationBranch;
                                                    }
                                                    
                                                    alternation_branch3 = 1;
                                                    pos += 9;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch3;
                                                //}
                                                
                                                AlternationBacktrack3:
                                                if (Utilities.s_hasTimeout)
                                                {
                                                    base.CheckTimeout();
                                                }
                                                
                                                switch (alternation_branch3)
                                                {
                                                    case 0:
                                                        goto AlternationBranch13;
                                                    case 1:
                                                        goto AlternationBranch;
                                                }
                                                
                                                AlternationMatch3:;
                                            //}
                                            
                                            alternation_branch1 = 2;
                                            goto AlternationMatch1;
                                        //}
                                        
                                        AlternationBacktrack1:
                                        if (Utilities.s_hasTimeout)
                                        {
                                            base.CheckTimeout();
                                        }
                                        
                                        switch (alternation_branch1)
                                        {
                                            case 0:
                                                goto AlternationBranch1;
                                            case 1:
                                                goto AlternationBacktrack2;
                                            case 2:
                                                goto AlternationBacktrack3;
                                        }
                                        
                                        AlternationMatch1:;
                                    //}
                                    
                                    base.Capture(2, capture_starting_pos1, pos);
                                    
                                    goto CaptureSkipBacktrack;
                                    
                                    CaptureBacktrack:
                                    goto AlternationBacktrack1;
                                    
                                    CaptureSkipBacktrack:;
                                //}
                                
                                alternation_branch = 0;
                                goto AlternationMatch;
                                
                                AlternationBranch:
                                pos = alternation_starting_pos;
                                slice = inputSpan.Slice(pos);
                                UncaptureUntil(alternation_starting_capturepos);
                            //}
                            
                            // Branch 1
                            //{
                                // 3rd capture group.
                                //{
                                    capture_starting_pos2 = pos;
                                    
                                    // Match with 4 alternative expressions.
                                    //{
                                        alternation_starting_pos4 = pos;
                                        alternation_starting_capturepos4 = base.Crawlpos();
                                        
                                        // Branch 0
                                        //{
                                            // Match the string "art-lojban".
                                            if (!slice.StartsWith("art-lojban"))
                                            {
                                                goto AlternationBranch15;
                                            }
                                            
                                            alternation_branch4 = 0;
                                            pos += 10;
                                            slice = inputSpan.Slice(pos);
                                            goto AlternationMatch4;
                                            
                                            AlternationBranch15:
                                            pos = alternation_starting_pos4;
                                            slice = inputSpan.Slice(pos);
                                            UncaptureUntil(alternation_starting_capturepos4);
                                        //}
                                        
                                        // Branch 1
                                        //{
                                            // Match the string "cel-gaulish".
                                            if (!slice.StartsWith("cel-gaulish"))
                                            {
                                                goto AlternationBranch16;
                                            }
                                            
                                            alternation_branch4 = 1;
                                            pos += 11;
                                            slice = inputSpan.Slice(pos);
                                            goto AlternationMatch4;
                                            
                                            AlternationBranch16:
                                            pos = alternation_starting_pos4;
                                            slice = inputSpan.Slice(pos);
                                            UncaptureUntil(alternation_starting_capturepos4);
                                        //}
                                        
                                        // Branch 2
                                        //{
                                            // Match the string "no-".
                                            if (!slice.StartsWith("no-"))
                                            {
                                                goto AlternationBranch17;
                                            }
                                            
                                            // Match with 2 alternative expressions.
                                            //{
                                                if ((uint)slice.Length < 4)
                                                {
                                                    goto AlternationBranch17;
                                                }
                                                
                                                switch (slice[3])
                                                {
                                                    case 'b':
                                                        // Match the string "ok".
                                                        if (!slice.Slice(4).StartsWith("ok"))
                                                        {
                                                            goto AlternationBranch17;
                                                        }
                                                        
                                                        pos += 6;
                                                        slice = inputSpan.Slice(pos);
                                                        break;
                                                        
                                                    case 'n':
                                                        // Match the string "yn".
                                                        if (!slice.Slice(4).StartsWith("yn"))
                                                        {
                                                            goto AlternationBranch17;
                                                        }
                                                        
                                                        pos += 6;
                                                        slice = inputSpan.Slice(pos);
                                                        break;
                                                        
                                                    default:
                                                        goto AlternationBranch17;
                                                }
                                            //}
                                            
                                            alternation_branch4 = 2;
                                            goto AlternationMatch4;
                                            
                                            AlternationBranch17:
                                            pos = alternation_starting_pos4;
                                            slice = inputSpan.Slice(pos);
                                            UncaptureUntil(alternation_starting_capturepos4);
                                        //}
                                        
                                        // Branch 3
                                        //{
                                            // Match the string "zh-".
                                            if (!slice.StartsWith("zh-"))
                                            {
                                                goto AlternationBranch14;
                                            }
                                            
                                            // Match with 4 alternative expressions.
                                            //{
                                                alternation_starting_pos5 = pos;
                                                alternation_starting_capturepos5 = base.Crawlpos();
                                                
                                                // Branch 0
                                                //{
                                                    // Match the string "guoyu".
                                                    if (!slice.Slice(3).StartsWith("guoyu"))
                                                    {
                                                        goto AlternationBranch18;
                                                    }
                                                    
                                                    alternation_branch5 = 0;
                                                    pos += 8;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch5;
                                                    
                                                    AlternationBranch18:
                                                    pos = alternation_starting_pos5;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos5);
                                                //}
                                                
                                                // Branch 1
                                                //{
                                                    // Match the string "hakka".
                                                    if (!slice.Slice(3).StartsWith("hakka"))
                                                    {
                                                        goto AlternationBranch19;
                                                    }
                                                    
                                                    alternation_branch5 = 1;
                                                    pos += 8;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch5;
                                                    
                                                    AlternationBranch19:
                                                    pos = alternation_starting_pos5;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos5);
                                                //}
                                                
                                                // Branch 2
                                                //{
                                                    // Match the string "min".
                                                    if (!slice.Slice(3).StartsWith("min"))
                                                    {
                                                        goto AlternationBranch20;
                                                    }
                                                    
                                                    // Match with 2 alternative expressions.
                                                    //{
                                                        alternation_starting_pos6 = pos;
                                                        alternation_starting_capturepos6 = base.Crawlpos();
                                                        
                                                        // Branch 0
                                                        //{
                                                            
                                                            alternation_branch6 = 0;
                                                            pos += 6;
                                                            slice = inputSpan.Slice(pos);
                                                            goto AlternationMatch6;
                                                            
                                                            AlternationBranch21:
                                                            pos = alternation_starting_pos6;
                                                            slice = inputSpan.Slice(pos);
                                                            UncaptureUntil(alternation_starting_capturepos6);
                                                        //}
                                                        
                                                        // Branch 1
                                                        //{
                                                            // Match the string "-nan".
                                                            if (!slice.Slice(6).StartsWith("-nan"))
                                                            {
                                                                goto AlternationBranch20;
                                                            }
                                                            
                                                            alternation_branch6 = 1;
                                                            pos += 10;
                                                            slice = inputSpan.Slice(pos);
                                                            goto AlternationMatch6;
                                                        //}
                                                        
                                                        AlternationBacktrack6:
                                                        if (Utilities.s_hasTimeout)
                                                        {
                                                            base.CheckTimeout();
                                                        }
                                                        
                                                        switch (alternation_branch6)
                                                        {
                                                            case 0:
                                                                goto AlternationBranch21;
                                                            case 1:
                                                                goto AlternationBranch20;
                                                        }
                                                        
                                                        AlternationMatch6:;
                                                    //}
                                                    
                                                    alternation_branch5 = 2;
                                                    goto AlternationMatch5;
                                                    
                                                    AlternationBranch20:
                                                    pos = alternation_starting_pos5;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos5);
                                                //}
                                                
                                                // Branch 3
                                                //{
                                                    // Match the string "xiang".
                                                    if (!slice.Slice(3).StartsWith("xiang"))
                                                    {
                                                        goto AlternationBranch14;
                                                    }
                                                    
                                                    alternation_branch5 = 3;
                                                    pos += 8;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch5;
                                                //}
                                                
                                                AlternationBacktrack5:
                                                if (Utilities.s_hasTimeout)
                                                {
                                                    base.CheckTimeout();
                                                }
                                                
                                                switch (alternation_branch5)
                                                {
                                                    case 0:
                                                        goto AlternationBranch18;
                                                    case 1:
                                                        goto AlternationBranch19;
                                                    case 2:
                                                        goto AlternationBacktrack6;
                                                    case 3:
                                                        goto AlternationBranch14;
                                                }
                                                
                                                AlternationMatch5:;
                                            //}
                                            
                                            alternation_branch4 = 3;
                                            goto AlternationMatch4;
                                        //}
                                        
                                        AlternationBacktrack4:
                                        if (Utilities.s_hasTimeout)
                                        {
                                            base.CheckTimeout();
                                        }
                                        
                                        switch (alternation_branch4)
                                        {
                                            case 0:
                                                goto AlternationBranch15;
                                            case 1:
                                                goto AlternationBranch16;
                                            case 2:
                                                goto AlternationBranch17;
                                            case 3:
                                                goto AlternationBacktrack5;
                                        }
                                        
                                        AlternationMatch4:;
                                    //}
                                    
                                    base.Capture(3, capture_starting_pos2, pos);
                                    
                                    goto CaptureSkipBacktrack1;
                                    
                                    CaptureBacktrack1:
                                    goto AlternationBacktrack4;
                                    
                                    CaptureSkipBacktrack1:;
                                //}
                                
                                alternation_branch = 1;
                                goto AlternationMatch;
                                
                                AlternationBranch14:
                                pos = alternation_starting_pos;
                                slice = inputSpan.Slice(pos);
                                UncaptureUntil(alternation_starting_capturepos);
                            //}
                            
                            // Branch 2
                            //{
                                // 4th capture group.
                                //{
                                    capture_starting_pos3 = pos;
                                    
                                    // Match with 3 alternative expressions.
                                    //{
                                        alternation_starting_pos7 = pos;
                                        alternation_starting_capturepos7 = base.Crawlpos();
                                        
                                        // Branch 0
                                        //{
                                            // 5th capture group.
                                            //{
                                                capture_starting_pos4 = pos;
                                                
                                                // Match a character in the set [A-Za-z] greedily at least 2 and at most 3 times.
                                                //{
                                                    charloop_starting_pos = pos;
                                                    
                                                    int iteration = 0;
                                                    while (iteration < 3 && (uint)iteration < (uint)slice.Length && char.IsAsciiLetter(slice[iteration]))
                                                    {
                                                        iteration++;
                                                    }
                                                    
                                                    if (iteration < 2)
                                                    {
                                                        goto AlternationBranch23;
                                                    }
                                                    
                                                    slice = slice.Slice(iteration);
                                                    pos += iteration;
                                                    
                                                    charloop_ending_pos = pos;
                                                    charloop_starting_pos += 2;
                                                    goto CharLoopEnd;
                                                    
                                                    CharLoopBacktrack:
                                                    UncaptureUntil(charloop_capture_pos);
                                                    
                                                    if (Utilities.s_hasTimeout)
                                                    {
                                                        base.CheckTimeout();
                                                    }
                                                    
                                                    if (charloop_starting_pos >= charloop_ending_pos)
                                                    {
                                                        goto AlternationBranch23;
                                                    }
                                                    pos = --charloop_ending_pos;
                                                    slice = inputSpan.Slice(pos);
                                                    
                                                    CharLoopEnd:
                                                    charloop_capture_pos = base.Crawlpos();
                                                //}
                                                
                                                // Optional (greedy).
                                                //{
                                                    loop_iteration = 0;
                                                    
                                                    LoopBody:
                                                    Utilities.StackPush(ref base.runstack!, ref stackpos, base.Crawlpos(), pos);
                                                    
                                                    loop_iteration++;
                                                    
                                                    // 6th capture group.
                                                    //{
                                                        int capture_starting_pos5 = pos;
                                                        
                                                        if ((uint)slice.Length < 4 ||
                                                            slice[0] != '-' || // Match '-'.
                                                            !char.IsAsciiLetter(slice[1]) || // Match a character in the set [A-Za-z] exactly 3 times.
                                                            !char.IsAsciiLetter(slice[2]) ||
                                                            !char.IsAsciiLetter(slice[3]))
                                                        {
                                                            goto LoopIterationNoMatch;
                                                        }
                                                        
                                                        // Loop greedily at most 2 times.
                                                        //{
                                                            pos += 4;
                                                            slice = inputSpan.Slice(pos);
                                                            loop_iteration1 = 0;
                                                            
                                                            LoopBody1:
                                                            Utilities.StackPush(ref base.runstack!, ref stackpos, base.Crawlpos(), pos);
                                                            
                                                            loop_iteration1++;
                                                            
                                                            // 7th capture group.
                                                            {
                                                                int capture_starting_pos6 = pos;
                                                                
                                                                if ((uint)slice.Length < 4 ||
                                                                    slice[0] != '-' || // Match '-'.
                                                                    !char.IsAsciiLetter(slice[1]) || // Match a character in the set [A-Za-z] exactly 3 times.
                                                                    !char.IsAsciiLetter(slice[2]) ||
                                                                    !char.IsAsciiLetter(slice[3]))
                                                                {
                                                                    goto LoopIterationNoMatch1;
                                                                }
                                                                
                                                                pos += 4;
                                                                slice = inputSpan.Slice(pos);
                                                                base.Capture(7, capture_starting_pos6, pos);
                                                            }
                                                            
                                                            
                                                            // The loop has an upper bound of 2. Continue iterating greedily if it hasn't yet been reached.
                                                            if (loop_iteration1 < 2)
                                                            {
                                                                goto LoopBody1;
                                                            }
                                                            goto LoopEnd1;
                                                            
                                                            // The loop iteration failed. Put state back to the way it was before the iteration.
                                                            LoopIterationNoMatch1:
                                                            if (--loop_iteration1 < 0)
                                                            {
                                                                // Unable to match the remainder of the expression after exhausting the loop.
                                                                goto LoopIterationNoMatch;
                                                            }
                                                            pos = base.runstack![--stackpos];
                                                            UncaptureUntil(base.runstack![--stackpos]);
                                                            slice = inputSpan.Slice(pos);
                                                            LoopEnd1:
                                                            
                                                            Utilities.StackPush(ref base.runstack!, ref stackpos, loop_iteration1);
                                                            goto LoopSkipBacktrack;
                                                            
                                                            LoopBacktrack:
                                                            loop_iteration1 = base.runstack![--stackpos];
                                                            if (Utilities.s_hasTimeout)
                                                            {
                                                                base.CheckTimeout();
                                                            }
                                                            
                                                            goto LoopIterationNoMatch1;
                                                            
                                                            LoopSkipBacktrack:;
                                                        //}
                                                        
                                                        base.Capture(6, capture_starting_pos5, pos);
                                                        
                                                        Utilities.StackPush(ref base.runstack!, ref stackpos, capture_starting_pos5);
                                                        goto CaptureSkipBacktrack2;
                                                        
                                                        CaptureBacktrack2:
                                                        capture_starting_pos5 = base.runstack![--stackpos];
                                                        goto LoopBacktrack;
                                                        
                                                        CaptureSkipBacktrack2:;
                                                    //}
                                                    
                                                    
                                                    // The loop has an upper bound of 1. Continue iterating greedily if it hasn't yet been reached.
                                                    if (loop_iteration == 0)
                                                    {
                                                        goto LoopBody;
                                                    }
                                                    goto LoopEnd;
                                                    
                                                    // The loop iteration failed. Put state back to the way it was before the iteration.
                                                    LoopIterationNoMatch:
                                                    if (--loop_iteration < 0)
                                                    {
                                                        // Unable to match the remainder of the expression after exhausting the loop.
                                                        goto CharLoopBacktrack;
                                                    }
                                                    pos = base.runstack![--stackpos];
                                                    UncaptureUntil(base.runstack![--stackpos]);
                                                    slice = inputSpan.Slice(pos);
                                                    goto LoopEnd;
                                                    
                                                    LoopBacktrack1:
                                                    if (Utilities.s_hasTimeout)
                                                    {
                                                        base.CheckTimeout();
                                                    }
                                                    
                                                    if (loop_iteration == 0)
                                                    {
                                                        // No iterations of the loop remain to backtrack into. Fail the loop.
                                                        goto CharLoopBacktrack;
                                                    }
                                                    goto CaptureBacktrack2;
                                                    LoopEnd:;
                                                //}
                                                
                                                base.Capture(5, capture_starting_pos4, pos);
                                                
                                                goto CaptureSkipBacktrack3;
                                                
                                                CaptureBacktrack3:
                                                goto LoopBacktrack1;
                                                
                                                CaptureSkipBacktrack3:;
                                            //}
                                            
                                            alternation_branch7 = 0;
                                            goto AlternationMatch7;
                                            
                                            AlternationBranch23:
                                            pos = alternation_starting_pos7;
                                            slice = inputSpan.Slice(pos);
                                            UncaptureUntil(alternation_starting_capturepos7);
                                        //}
                                        
                                        // Branch 1
                                        //{
                                            // Match a character in the set [A-Za-z] exactly 4 times.
                                            {
                                                if ((uint)slice.Length < 4 ||
                                                    !char.IsAsciiLetter(slice[0]) ||
                                                    !char.IsAsciiLetter(slice[1]) ||
                                                    !char.IsAsciiLetter(slice[2]) ||
                                                    !char.IsAsciiLetter(slice[3]))
                                                {
                                                    goto AlternationBranch24;
                                                }
                                            }
                                            
                                            alternation_branch7 = 1;
                                            pos += 4;
                                            slice = inputSpan.Slice(pos);
                                            goto AlternationMatch7;
                                            
                                            AlternationBranch24:
                                            pos = alternation_starting_pos7;
                                            slice = inputSpan.Slice(pos);
                                            UncaptureUntil(alternation_starting_capturepos7);
                                        //}
                                        
                                        // Branch 2
                                        //{
                                            // Match a character in the set [A-Za-z] greedily at least 5 and at most 8 times.
                                            //{
                                                charloop_starting_pos1 = pos;
                                                
                                                int iteration1 = 0;
                                                while (iteration1 < 8 && (uint)iteration1 < (uint)slice.Length && char.IsAsciiLetter(slice[iteration1]))
                                                {
                                                    iteration1++;
                                                }
                                                
                                                if (iteration1 < 5)
                                                {
                                                    goto AlternationBranch22;
                                                }
                                                
                                                slice = slice.Slice(iteration1);
                                                pos += iteration1;
                                                
                                                charloop_ending_pos1 = pos;
                                                charloop_starting_pos1 += 5;
                                                goto CharLoopEnd1;
                                                
                                                CharLoopBacktrack1:
                                                UncaptureUntil(charloop_capture_pos1);
                                                
                                                if (Utilities.s_hasTimeout)
                                                {
                                                    base.CheckTimeout();
                                                }
                                                
                                                if (charloop_starting_pos1 >= charloop_ending_pos1)
                                                {
                                                    goto AlternationBranch22;
                                                }
                                                pos = --charloop_ending_pos1;
                                                slice = inputSpan.Slice(pos);
                                                
                                                CharLoopEnd1:
                                                charloop_capture_pos1 = base.Crawlpos();
                                            //}
                                            
                                            alternation_branch7 = 2;
                                            goto AlternationMatch7;
                                        //}
                                        
                                        AlternationBacktrack7:
                                        if (Utilities.s_hasTimeout)
                                        {
                                            base.CheckTimeout();
                                        }
                                        
                                        switch (alternation_branch7)
                                        {
                                            case 0:
                                                goto CaptureBacktrack3;
                                            case 1:
                                                goto AlternationBranch24;
                                            case 2:
                                                goto CharLoopBacktrack1;
                                        }
                                        
                                        AlternationMatch7:;
                                    //}
                                    
                                    // Optional (greedy).
                                    //{
                                        loop_iteration2 = 0;
                                        
                                        LoopBody2:
                                        Utilities.StackPush(ref base.runstack!, ref stackpos, base.Crawlpos(), pos);
                                        
                                        loop_iteration2++;
                                        
                                        // 8th capture group.
                                        {
                                            int capture_starting_pos7 = pos;
                                            
                                            if ((uint)slice.Length < 5 ||
                                                slice[0] != '-' || // Match '-'.
                                                !char.IsAsciiLetter(slice[1]) || // Match a character in the set [A-Za-z] exactly 4 times.
                                                !char.IsAsciiLetter(slice[2]) ||
                                                !char.IsAsciiLetter(slice[3]) ||
                                                !char.IsAsciiLetter(slice[4]))
                                            {
                                                goto LoopIterationNoMatch2;
                                            }
                                            
                                            pos += 5;
                                            slice = inputSpan.Slice(pos);
                                            base.Capture(8, capture_starting_pos7, pos);
                                        }
                                        
                                        
                                        // The loop has an upper bound of 1. Continue iterating greedily if it hasn't yet been reached.
                                        if (loop_iteration2 == 0)
                                        {
                                            goto LoopBody2;
                                        }
                                        goto LoopEnd2;
                                        
                                        // The loop iteration failed. Put state back to the way it was before the iteration.
                                        LoopIterationNoMatch2:
                                        if (--loop_iteration2 < 0)
                                        {
                                            // Unable to match the remainder of the expression after exhausting the loop.
                                            goto AlternationBacktrack7;
                                        }
                                        pos = base.runstack![--stackpos];
                                        UncaptureUntil(base.runstack![--stackpos]);
                                        slice = inputSpan.Slice(pos);
                                        LoopEnd2:;
                                    //}
                                    
                                    // Optional (greedy).
                                    //{
                                        loop_iteration3 = 0;
                                        
                                        LoopBody3:
                                        Utilities.StackPush(ref base.runstack!, ref stackpos, base.Crawlpos(), pos);
                                        
                                        loop_iteration3++;
                                        
                                        // 9th capture group.
                                        //{
                                            int capture_starting_pos8 = pos;
                                            
                                            // Match '-'.
                                            if (slice.IsEmpty || slice[0] != '-')
                                            {
                                                goto LoopIterationNoMatch3;
                                            }
                                            
                                            // Match with 2 alternative expressions.
                                            //{
                                                int alternation_starting_pos8 = pos;
                                                int alternation_starting_capturepos8 = base.Crawlpos();
                                                
                                                // Branch 0
                                                //{
                                                    // Match a character in the set [A-Za-z] exactly 2 times.
                                                    {
                                                        if ((uint)slice.Length < 3 ||
                                                            !char.IsAsciiLetter(slice[1]) ||
                                                            !char.IsAsciiLetter(slice[2]))
                                                        {
                                                            goto AlternationBranch25;
                                                        }
                                                    }
                                                    
                                                    Utilities.StackPush(ref base.runstack!, ref stackpos, 0, alternation_starting_pos8, alternation_starting_capturepos8);
                                                    pos += 3;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch8;
                                                    
                                                    AlternationBranch25:
                                                    pos = alternation_starting_pos8;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos8);
                                                //}
                                                
                                                // Branch 1
                                                //{
                                                    // Match '0' through '9' exactly 3 times.
                                                    {
                                                        if ((uint)slice.Length < 4 ||
                                                            !char.IsAsciiDigit(slice[1]) ||
                                                            !char.IsAsciiDigit(slice[2]) ||
                                                            !char.IsAsciiDigit(slice[3]))
                                                        {
                                                            goto LoopIterationNoMatch3;
                                                        }
                                                    }
                                                    
                                                    Utilities.StackPush(ref base.runstack!, ref stackpos, 1, alternation_starting_pos8, alternation_starting_capturepos8);
                                                    pos += 4;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch8;
                                                //}
                                                
                                                AlternationBacktrack8:
                                                if (Utilities.s_hasTimeout)
                                                {
                                                    base.CheckTimeout();
                                                }
                                                
                                                Utilities.StackPop(base.runstack!, ref stackpos, out alternation_starting_capturepos8, out alternation_starting_pos8);
                                                switch (base.runstack![--stackpos])
                                                {
                                                    case 0:
                                                        goto AlternationBranch25;
                                                    case 1:
                                                        goto LoopIterationNoMatch3;
                                                }
                                                
                                                AlternationMatch8:;
                                            //}
                                            
                                            base.Capture(9, capture_starting_pos8, pos);
                                            
                                            Utilities.StackPush(ref base.runstack!, ref stackpos, capture_starting_pos8);
                                            goto CaptureSkipBacktrack4;
                                            
                                            CaptureBacktrack4:
                                            capture_starting_pos8 = base.runstack![--stackpos];
                                            goto AlternationBacktrack8;
                                            
                                            CaptureSkipBacktrack4:;
                                        //}
                                        
                                        
                                        // The loop has an upper bound of 1. Continue iterating greedily if it hasn't yet been reached.
                                        if (loop_iteration3 == 0)
                                        {
                                            goto LoopBody3;
                                        }
                                        goto LoopEnd3;
                                        
                                        // The loop iteration failed. Put state back to the way it was before the iteration.
                                        LoopIterationNoMatch3:
                                        if (--loop_iteration3 < 0)
                                        {
                                            // Unable to match the remainder of the expression after exhausting the loop.
                                            goto LoopIterationNoMatch2;
                                        }
                                        pos = base.runstack![--stackpos];
                                        UncaptureUntil(base.runstack![--stackpos]);
                                        slice = inputSpan.Slice(pos);
                                        goto LoopEnd3;
                                        
                                        LoopBacktrack2:
                                        if (Utilities.s_hasTimeout)
                                        {
                                            base.CheckTimeout();
                                        }
                                        
                                        if (loop_iteration3 == 0)
                                        {
                                            // No iterations of the loop remain to backtrack into. Fail the loop.
                                            goto LoopIterationNoMatch2;
                                        }
                                        goto CaptureBacktrack4;
                                        LoopEnd3:;
                                    //}
                                    
                                    // Loop greedily any number of times.
                                    //{
                                        loop_iteration4 = 0;
                                        
                                        LoopBody4:
                                        Utilities.StackPush(ref base.runstack!, ref stackpos, base.Crawlpos(), pos);
                                        
                                        loop_iteration4++;
                                        
                                        // 10th capture group.
                                        //{
                                            int capture_starting_pos9 = pos;
                                            
                                            // Match '-'.
                                            if (slice.IsEmpty || slice[0] != '-')
                                            {
                                                goto LoopIterationNoMatch4;
                                            }
                                            
                                            // Match with 2 alternative expressions.
                                            //{
                                                int alternation_starting_pos9 = pos;
                                                int alternation_starting_capturepos9 = base.Crawlpos();
                                                
                                                // Branch 0
                                                //{
                                                    // Match a character in the set [0-9A-Za-z] greedily at least 5 and at most 8 times.
                                                    //{
                                                        pos++;
                                                        slice = inputSpan.Slice(pos);
                                                        charloop_starting_pos2 = pos;
                                                        
                                                        int iteration2 = 0;
                                                        while (iteration2 < 8 && (uint)iteration2 < (uint)slice.Length && char.IsAsciiLetterOrDigit(slice[iteration2]))
                                                        {
                                                            iteration2++;
                                                        }
                                                        
                                                        if (iteration2 < 5)
                                                        {
                                                            goto AlternationBranch26;
                                                        }
                                                        
                                                        slice = slice.Slice(iteration2);
                                                        pos += iteration2;
                                                        
                                                        charloop_ending_pos2 = pos;
                                                        charloop_starting_pos2 += 5;
                                                        goto CharLoopEnd2;
                                                        
                                                        CharLoopBacktrack2:
                                                        UncaptureUntil(base.runstack![--stackpos]);
                                                        Utilities.StackPop(base.runstack!, ref stackpos, out charloop_ending_pos2, out charloop_starting_pos2);
                                                        
                                                        if (Utilities.s_hasTimeout)
                                                        {
                                                            base.CheckTimeout();
                                                        }
                                                        
                                                        if (charloop_starting_pos2 >= charloop_ending_pos2)
                                                        {
                                                            goto AlternationBranch26;
                                                        }
                                                        pos = --charloop_ending_pos2;
                                                        slice = inputSpan.Slice(pos);
                                                        
                                                        CharLoopEnd2:
                                                        Utilities.StackPush(ref base.runstack!, ref stackpos, charloop_starting_pos2, charloop_ending_pos2, base.Crawlpos());
                                                    //}
                                                    
                                                    Utilities.StackPush(ref base.runstack!, ref stackpos, 0, alternation_starting_pos9, alternation_starting_capturepos9);
                                                    goto AlternationMatch9;
                                                    
                                                    AlternationBranch26:
                                                    pos = alternation_starting_pos9;
                                                    slice = inputSpan.Slice(pos);
                                                    UncaptureUntil(alternation_starting_capturepos9);
                                                //}
                                                
                                                // Branch 1
                                                //{
                                                    if ((uint)slice.Length < 5 ||
                                                        !char.IsAsciiDigit(slice[1]) || // Match '0' through '9'.
                                                        !char.IsAsciiLetterOrDigit(slice[2]) || // Match a character in the set [0-9A-Za-z] exactly 3 times.
                                                        !char.IsAsciiLetterOrDigit(slice[3]) ||
                                                        !char.IsAsciiLetterOrDigit(slice[4]))
                                                    {
                                                        goto LoopIterationNoMatch4;
                                                    }
                                                    
                                                    Utilities.StackPush(ref base.runstack!, ref stackpos, 1, alternation_starting_pos9, alternation_starting_capturepos9);
                                                    pos += 5;
                                                    slice = inputSpan.Slice(pos);
                                                    goto AlternationMatch9;
                                                //}
                                                
                                                AlternationBacktrack9:
                                                if (Utilities.s_hasTimeout)
                                                {
                                                    base.CheckTimeout();
                                                }
                                                
                                                Utilities.StackPop(base.runstack!, ref stackpos, out alternation_starting_capturepos9, out alternation_starting_pos9);
                                                switch (base.runstack![--stackpos])
                                                {
                                                    case 0:
                                                        goto CharLoopBacktrack2;
                                                    case 1:
                                                        goto LoopIterationNoMatch4;
                                                }
                                                
                                                AlternationMatch9:;
                                            //}
                                            
                                            base.Capture(10, capture_starting_pos9, pos);
                                            
                                            Utilities.StackPush(ref base.runstack!, ref stackpos, capture_starting_pos9);
                                            goto CaptureSkipBacktrack5;
                                            
                                            CaptureBacktrack5:
                                            capture_starting_pos9 = base.runstack![--stackpos];
                                            goto AlternationBacktrack9;
                                            
                                            CaptureSkipBacktrack5:;
                                        //}
                                        
                                        
                                        // The loop has no upper bound. Continue iterating greedily.
                                        goto LoopBody4;
                                        
                                        // The loop iteration failed. Put state back to the way it was before the iteration.
                                        LoopIterationNoMatch4:
                                        if (--loop_iteration4 < 0)
                                        {
                                            // Unable to match the remainder of the expression after exhausting the loop.
                                            goto LoopBacktrack2;
                                        }
                                        pos = base.runstack![--stackpos];
                                        UncaptureUntil(base.runstack![--stackpos]);
                                        slice = inputSpan.Slice(pos);
                                        goto LoopEnd4;
                                        
                                        LoopBacktrack3:
                                        if (Utilities.s_hasTimeout)
                                        {
                                            base.CheckTimeout();
                                        }
                                        
                                        if (loop_iteration4 == 0)
                                        {
                                            // No iterations of the loop remain to backtrack into. Fail the loop.
                                            goto LoopBacktrack2;
                                        }
                                        goto CaptureBacktrack5;
                                        LoopEnd4:;
                                    //}
                                    
                                    // Loop greedily any number of times.
                                    //{
                                        loop_iteration5 = 0;
                                        
                                        LoopBody5:
                                        Utilities.StackPush(ref base.runstack!, ref stackpos, base.Crawlpos(), pos);
                                        
                                        loop_iteration5++;
                                        
                                        // 11th capture group.
                                        //{
                                            int capture_starting_pos10 = pos;
                                            
                                            if ((uint)slice.Length < 2 ||
                                                slice[0] != '-' || // Match '-'.
                                                ((ch = slice[1]) >= '{' || ("\0\0\0Ͽ\ufffeۿ\ufffeۿ"[ch >> 4] & (1 << (ch & 0xF))) == 0)) // Match a character in the set [0-9A-WYZa-wyz].
                                            {
                                                goto LoopIterationNoMatch5;
                                            }
                                            
                                            // Loop greedily at least once.
                                            //{
                                                pos += 2;
                                                slice = inputSpan.Slice(pos);
                                                loop_iteration6 = 0;
                                                
                                                LoopBody6:
                                                Utilities.StackPush(ref base.runstack!, ref stackpos, base.Crawlpos(), pos);
                                                
                                                loop_iteration6++;
                                                
                                                // 12th capture group.
                                                //{
                                                    int capture_starting_pos11 = pos;
                                                    
                                                    // Match '-'.
                                                    if (slice.IsEmpty || slice[0] != '-')
                                                    {
                                                        goto LoopIterationNoMatch6;
                                                    }
                                                    
                                                    // Match a character in the set [0-9A-Za-z] greedily at least 2 and at most 8 times.
                                                    //{
                                                        pos++;
                                                        slice = inputSpan.Slice(pos);
                                                        charloop_starting_pos3 = pos;
                                                        
                                                        int iteration3 = 0;
                                                        while (iteration3 < 8 && (uint)iteration3 < (uint)slice.Length && char.IsAsciiLetterOrDigit(slice[iteration3]))
                                                        {
                                                            iteration3++;
                                                        }
                                                        
                                                        if (iteration3 < 2)
                                                        {
                                                            goto LoopIterationNoMatch6;
                                                        }
                                                        
                                                        slice = slice.Slice(iteration3);
                                                        pos += iteration3;
                                                        
                                                        charloop_ending_pos3 = pos;
                                                        charloop_starting_pos3 += 2;
                                                        goto CharLoopEnd3;
                                                        
                                                        CharLoopBacktrack3:
                                                        UncaptureUntil(base.runstack![--stackpos]);
                                                        Utilities.StackPop(base.runstack!, ref stackpos, out charloop_ending_pos3, out charloop_starting_pos3);
                                                        
                                                        if (Utilities.s_hasTimeout)
                                                        {
                                                            base.CheckTimeout();
                                                        }
                                                        
                                                        if (charloop_starting_pos3 >= charloop_ending_pos3)
                                                        {
                                                            goto LoopIterationNoMatch6;
                                                        }
                                                        pos = --charloop_ending_pos3;
                                                        slice = inputSpan.Slice(pos);
                                                        
                                                        CharLoopEnd3:
                                                        Utilities.StackPush(ref base.runstack!, ref stackpos, charloop_starting_pos3, charloop_ending_pos3, base.Crawlpos());
                                                    //}
                                                    
                                                    base.Capture(12, capture_starting_pos11, pos);
                                                    
                                                    Utilities.StackPush(ref base.runstack!, ref stackpos, capture_starting_pos11);
                                                    goto CaptureSkipBacktrack6;
                                                    
                                                    CaptureBacktrack6:
                                                    capture_starting_pos11 = base.runstack![--stackpos];
                                                    goto CharLoopBacktrack3;
                                                    
                                                    CaptureSkipBacktrack6:;
                                                //}
                                                
                                                
                                                // The loop has no upper bound. Continue iterating greedily.
                                                goto LoopBody6;
                                                
                                                // The loop iteration failed. Put state back to the way it was before the iteration.
                                                LoopIterationNoMatch6:
                                                if (--loop_iteration6 < 0)
                                                {
                                                    // Unable to match the remainder of the expression after exhausting the loop.
                                                    goto LoopIterationNoMatch5;
                                                }
                                                pos = base.runstack![--stackpos];
                                                UncaptureUntil(base.runstack![--stackpos]);
                                                slice = inputSpan.Slice(pos);
                                                if (loop_iteration6 == 0)
                                                {
                                                    // No iterations have been matched to backtrack into. Fail the loop.
                                                    goto LoopIterationNoMatch5;
                                                }
                                                
                                                goto LoopEnd6;
                                                
                                                LoopBacktrack4:
                                                if (Utilities.s_hasTimeout)
                                                {
                                                    base.CheckTimeout();
                                                }
                                                
                                                if (loop_iteration6 == 0)
                                                {
                                                    // No iterations of the loop remain to backtrack into. Fail the loop.
                                                    goto LoopIterationNoMatch5;
                                                }
                                                goto CaptureBacktrack6;
                                                LoopEnd6:
                                                
                                                Utilities.StackPush(ref base.runstack!, ref stackpos, loop_iteration6);
                                                goto LoopSkipBacktrack1;
                                                
                                                LoopBacktrack5:
                                                loop_iteration6 = base.runstack![--stackpos];
                                                if (Utilities.s_hasTimeout)
                                                {
                                                    base.CheckTimeout();
                                                }
                                                
                                                goto LoopBacktrack4;
                                                
                                                LoopSkipBacktrack1:;
                                            //}
                                            
                                            base.Capture(11, capture_starting_pos10, pos);
                                            
                                            Utilities.StackPush(ref base.runstack!, ref stackpos, capture_starting_pos10);
                                            goto CaptureSkipBacktrack7;
                                            
                                            CaptureBacktrack7:
                                            capture_starting_pos10 = base.runstack![--stackpos];
                                            goto LoopBacktrack5;
                                            
                                            CaptureSkipBacktrack7:;
                                        //}
                                        
                                        
                                        // The loop has no upper bound. Continue iterating greedily.
                                        goto LoopBody5;
                                        
                                        // The loop iteration failed. Put state back to the way it was before the iteration.
                                        LoopIterationNoMatch5:
                                        if (--loop_iteration5 < 0)
                                        {
                                            // Unable to match the remainder of the expression after exhausting the loop.
                                            goto LoopBacktrack3;
                                        }
                                        pos = base.runstack![--stackpos];
                                        UncaptureUntil(base.runstack![--stackpos]);
                                        slice = inputSpan.Slice(pos);
                                        goto LoopEnd5;
                                        
                                        LoopBacktrack6:
                                        if (Utilities.s_hasTimeout)
                                        {
                                            base.CheckTimeout();
                                        }
                                        
                                        if (loop_iteration5 == 0)
                                        {
                                            // No iterations of the loop remain to backtrack into. Fail the loop.
                                            goto LoopBacktrack3;
                                        }
                                        goto CaptureBacktrack7;
                                        LoopEnd5:;
                                    //}
                                    
                                    // Optional (greedy).
                                    //{
                                        loop_iteration7 = 0;
                                        
                                        LoopBody7:
                                        Utilities.StackPush(ref base.runstack!, ref stackpos, base.Crawlpos(), pos);
                                        
                                        loop_iteration7++;
                                        
                                        // 13th capture group.
                                        //{
                                            int capture_starting_pos12 = pos;
                                            
                                            // Match the string "-x".
                                            if (!slice.StartsWith("-x"))
                                            {
                                                goto LoopIterationNoMatch7;
                                            }
                                            
                                            // Loop greedily at least once.
                                            //{
                                                pos += 2;
                                                slice = inputSpan.Slice(pos);
                                                loop_iteration8 = 0;
                                                
                                                LoopBody8:
                                                Utilities.StackPush(ref base.runstack!, ref stackpos, base.Crawlpos(), pos);
                                                
                                                loop_iteration8++;
                                                
                                                // 14th capture group.
                                                //{
                                                    int capture_starting_pos13 = pos;
                                                    
                                                    // Match '-'.
                                                    if (slice.IsEmpty || slice[0] != '-')
                                                    {
                                                        goto LoopIterationNoMatch8;
                                                    }
                                                    
                                                    // Match a character in the set [0-9A-Za-z] greedily at least 1 and at most 8 times.
                                                    //{
                                                        pos++;
                                                        slice = inputSpan.Slice(pos);
                                                        charloop_starting_pos4 = pos;
                                                        
                                                        int iteration4 = 0;
                                                        while (iteration4 < 8 && (uint)iteration4 < (uint)slice.Length && char.IsAsciiLetterOrDigit(slice[iteration4]))
                                                        {
                                                            iteration4++;
                                                        }
                                                        
                                                        if (iteration4 == 0)
                                                        {
                                                            goto LoopIterationNoMatch8;
                                                        }
                                                        
                                                        slice = slice.Slice(iteration4);
                                                        pos += iteration4;
                                                        
                                                        charloop_ending_pos4 = pos;
                                                        charloop_starting_pos4++;
                                                        goto CharLoopEnd4;
                                                        
                                                        CharLoopBacktrack4:
                                                        UncaptureUntil(base.runstack![--stackpos]);
                                                        Utilities.StackPop(base.runstack!, ref stackpos, out charloop_ending_pos4, out charloop_starting_pos4);
                                                        
                                                        if (Utilities.s_hasTimeout)
                                                        {
                                                            base.CheckTimeout();
                                                        }
                                                        
                                                        if (charloop_starting_pos4 >= charloop_ending_pos4)
                                                        {
                                                            goto LoopIterationNoMatch8;
                                                        }
                                                        pos = --charloop_ending_pos4;
                                                        slice = inputSpan.Slice(pos);
                                                        
                                                        CharLoopEnd4:
                                                        Utilities.StackPush(ref base.runstack!, ref stackpos, charloop_starting_pos4, charloop_ending_pos4, base.Crawlpos());
                                                    //}
                                                    
                                                    base.Capture(14, capture_starting_pos13, pos);
                                                    
                                                    Utilities.StackPush(ref base.runstack!, ref stackpos, capture_starting_pos13);
                                                    goto CaptureSkipBacktrack8;
                                                    
                                                    CaptureBacktrack8:
                                                    capture_starting_pos13 = base.runstack![--stackpos];
                                                    goto CharLoopBacktrack4;
                                                    
                                                    CaptureSkipBacktrack8:;
                                                //}
                                                
                                                
                                                // The loop has no upper bound. Continue iterating greedily.
                                                goto LoopBody8;
                                                
                                                // The loop iteration failed. Put state back to the way it was before the iteration.
                                                LoopIterationNoMatch8:
                                                if (--loop_iteration8 < 0)
                                                {
                                                    // Unable to match the remainder of the expression after exhausting the loop.
                                                    goto LoopIterationNoMatch7;
                                                }
                                                pos = base.runstack![--stackpos];
                                                UncaptureUntil(base.runstack![--stackpos]);
                                                slice = inputSpan.Slice(pos);
                                                if (loop_iteration8 == 0)
                                                {
                                                    // No iterations have been matched to backtrack into. Fail the loop.
                                                    goto LoopIterationNoMatch7;
                                                }
                                                
                                                goto LoopEnd8;
                                                
                                                LoopBacktrack7:
                                                if (Utilities.s_hasTimeout)
                                                {
                                                    base.CheckTimeout();
                                                }
                                                
                                                if (loop_iteration8 == 0)
                                                {
                                                    // No iterations of the loop remain to backtrack into. Fail the loop.
                                                    goto LoopIterationNoMatch7;
                                                }
                                                goto CaptureBacktrack8;
                                                LoopEnd8:
                                                
                                                Utilities.StackPush(ref base.runstack!, ref stackpos, loop_iteration8);
                                                goto LoopSkipBacktrack2;
                                                
                                                LoopBacktrack8:
                                                loop_iteration8 = base.runstack![--stackpos];
                                                if (Utilities.s_hasTimeout)
                                                {
                                                    base.CheckTimeout();
                                                }
                                                
                                                goto LoopBacktrack7;
                                                
                                                LoopSkipBacktrack2:;
                                            //}
                                            
                                            base.Capture(13, capture_starting_pos12, pos);
                                            
                                            Utilities.StackPush(ref base.runstack!, ref stackpos, capture_starting_pos12);
                                            goto CaptureSkipBacktrack9;
                                            
                                            CaptureBacktrack9:
                                            capture_starting_pos12 = base.runstack![--stackpos];
                                            goto LoopBacktrack8;
                                            
                                            CaptureSkipBacktrack9:;
                                        //}
                                        
                                        
                                        // The loop has an upper bound of 1. Continue iterating greedily if it hasn't yet been reached.
                                        if (loop_iteration7 == 0)
                                        {
                                            goto LoopBody7;
                                        }
                                        goto LoopEnd7;
                                        
                                        // The loop iteration failed. Put state back to the way it was before the iteration.
                                        LoopIterationNoMatch7:
                                        if (--loop_iteration7 < 0)
                                        {
                                            // Unable to match the remainder of the expression after exhausting the loop.
                                            goto LoopBacktrack6;
                                        }
                                        pos = base.runstack![--stackpos];
                                        UncaptureUntil(base.runstack![--stackpos]);
                                        slice = inputSpan.Slice(pos);
                                        goto LoopEnd7;
                                        
                                        LoopBacktrack9:
                                        if (Utilities.s_hasTimeout)
                                        {
                                            base.CheckTimeout();
                                        }
                                        
                                        if (loop_iteration7 == 0)
                                        {
                                            // No iterations of the loop remain to backtrack into. Fail the loop.
                                            goto LoopBacktrack6;
                                        }
                                        goto CaptureBacktrack9;
                                        LoopEnd7:;
                                    //}
                                    
                                    base.Capture(4, capture_starting_pos3, pos);
                                    
                                    goto CaptureSkipBacktrack10;
                                    
                                    CaptureBacktrack10:
                                    goto LoopBacktrack9;
                                    
                                    CaptureSkipBacktrack10:;
                                //}
                                
                                alternation_branch = 2;
                                goto AlternationMatch;
                                
                                AlternationBranch22:
                                pos = alternation_starting_pos;
                                slice = inputSpan.Slice(pos);
                                UncaptureUntil(alternation_starting_capturepos);
                            //}
                            
                            // Branch 3
                            //{
                                // Match 'x'.
                                if (slice.IsEmpty || slice[0] != 'x')
                                {
                                    UncaptureUntil(0);
                                    return false; // The input didn't match.
                                }
                                
                                // Loop greedily at least once.
                                //{
                                    pos++;
                                    slice = inputSpan.Slice(pos);
                                    loop_iteration9 = 0;
                                    
                                    LoopBody9:
                                    Utilities.StackPush(ref base.runstack!, ref stackpos, base.Crawlpos(), pos);
                                    
                                    loop_iteration9++;
                                    
                                    // 15th capture group.
                                    {
                                        int capture_starting_pos14 = pos;
                                        
                                        // Match '-'.
                                        if (slice.IsEmpty || slice[0] != '-')
                                        {
                                            goto LoopIterationNoMatch9;
                                        }
                                        
                                        // Match a character in the set [0-9A-Za-z] atomically at least 1 and at most 8 times.
                                        {
                                            pos++;
                                            slice = inputSpan.Slice(pos);
                                            int iteration5 = 0;
                                            while (iteration5 < 8 && (uint)iteration5 < (uint)slice.Length && char.IsAsciiLetterOrDigit(slice[iteration5]))
                                            {
                                                iteration5++;
                                            }
                                            
                                            if (iteration5 == 0)
                                            {
                                                goto LoopIterationNoMatch9;
                                            }
                                            
                                            slice = slice.Slice(iteration5);
                                            pos += iteration5;
                                        }
                                        
                                        base.Capture(15, capture_starting_pos14, pos);
                                    }
                                    
                                    
                                    // The loop has no upper bound. Continue iterating greedily.
                                    goto LoopBody9;
                                    
                                    // The loop iteration failed. Put state back to the way it was before the iteration.
                                    LoopIterationNoMatch9:
                                    if (--loop_iteration9 < 0)
                                    {
                                        // Unable to match the remainder of the expression after exhausting the loop.
                                        UncaptureUntil(0);
                                        return false; // The input didn't match.
                                    }
                                    pos = base.runstack![--stackpos];
                                    UncaptureUntil(base.runstack![--stackpos]);
                                    slice = inputSpan.Slice(pos);
                                    if (loop_iteration9 == 0)
                                    {
                                        // All possible iterations have matched, but it's below the required minimum of 1. Fail the loop.
                                        UncaptureUntil(0);
                                        return false; // The input didn't match.
                                    }
                                    
                                    LoopEnd9:;
                                //}
                                
                                alternation_branch = 3;
                                goto AlternationMatch;
                            //}
                            
                            AlternationBacktrack:
                            if (Utilities.s_hasTimeout)
                            {
                                base.CheckTimeout();
                            }
                            
                            switch (alternation_branch)
                            {
                                case 0:
                                    goto CaptureBacktrack;
                                case 1:
                                    goto CaptureBacktrack1;
                                case 2:
                                    goto CaptureBacktrack10;
                                case 3:
                                    goto LoopIterationNoMatch9;
                            }
                            
                            AlternationMatch:;
                        //}
                        
                        base.Capture(1, capture_starting_pos, pos);
                        
                        goto CaptureSkipBacktrack11;
                        
                        CaptureBacktrack11:
                        goto AlternationBacktrack;
                        
                        CaptureSkipBacktrack11:;
                    //}
                    
                    // Match if at the end of the string or if before an ending newline.
                    if (pos < inputSpan.Length - 1 || ((uint)pos < (uint)inputSpan.Length && inputSpan[pos] != '\n'))
                    {
                        goto CaptureBacktrack11;
                    }
                    
                    // The input matched.
                    base.runtextpos = pos;
                    base.Capture(0, matchStart, pos);
                    return true;
                    
                    // <summary>Undo captures until it reaches the specified capture position.</summary>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    void UncaptureUntil(int capturePosition)
                    {
                        while (base.Crawlpos() > capturePosition)
                        {
                            base.Uncapture();
                        }
                    }
                }
            }
        }

    }
    
    /// <summary>Helper methods used by generated <see cref="Regex"/>-derived implementations.</summary>
    [GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.8.17405")]
    file static class Utilities
    {
        /// <summary>Default timeout value set in <see cref="AppContext"/>, or <see cref="Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        internal static readonly TimeSpan s_defaultTimeout = AppContext.GetData("REGEX_DEFAULT_MATCH_TIMEOUT") is TimeSpan timeout ? timeout : Regex.InfiniteMatchTimeout;
        
        /// <summary>Whether <see cref="s_defaultTimeout"/> is non-infinite.</summary>
        internal static readonly bool s_hasTimeout = s_defaultTimeout != Timeout.InfiniteTimeSpan;
        
        /// <summary>Pushes 2 values onto the backtracking stack.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static void StackPush(ref int[] stack, ref int pos, int arg0, int arg1)
        {
            // If there's space available for all 2 values, store them.
            int[] s = stack;
            int p = pos;
            if ((uint)(p + 1) < (uint)s.Length)
            {
                s[p] = arg0;
                s[p + 1] = arg1;
                pos += 2;
                return;
            }
        
            // Otherwise, resize the stack to make room and try again.
            WithResize(ref stack, ref pos, arg0, arg1);
        
            // <summary>Resize the backtracking stack array and push 2 values onto the stack.</summary>
            [MethodImpl(MethodImplOptions.NoInlining)]
            static void WithResize(ref int[] stack, ref int pos, int arg0, int arg1)
            {
                Array.Resize(ref stack, (pos + 1) * 2);
                StackPush(ref stack, ref pos, arg0, arg1);
            }
        }
        
        /// <summary>Pushes 1 value onto the backtracking stack.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static void StackPush(ref int[] stack, ref int pos, int arg0)
        {
            // If there's space available for the value, store it.
            int[] s = stack;
            int p = pos;
            if ((uint)p < (uint)s.Length)
            {
                s[p] = arg0;
                pos++;
                return;
            }
        
            // Otherwise, resize the stack to make room and try again.
            WithResize(ref stack, ref pos, arg0);
        
            // <summary>Resize the backtracking stack array and push 1 value onto the stack.</summary>
            [MethodImpl(MethodImplOptions.NoInlining)]
            static void WithResize(ref int[] stack, ref int pos, int arg0)
            {
                Array.Resize(ref stack, (pos + 0) * 2);
                StackPush(ref stack, ref pos, arg0);
            }
        }
        
        /// <summary>Pushes 3 values onto the backtracking stack.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static void StackPush(ref int[] stack, ref int pos, int arg0, int arg1, int arg2)
        {
            // If there's space available for all 3 values, store them.
            int[] s = stack;
            int p = pos;
            if ((uint)(p + 2) < (uint)s.Length)
            {
                s[p] = arg0;
                s[p + 1] = arg1;
                s[p + 2] = arg2;
                pos += 3;
                return;
            }
        
            // Otherwise, resize the stack to make room and try again.
            WithResize(ref stack, ref pos, arg0, arg1, arg2);
        
            // <summary>Resize the backtracking stack array and push 3 values onto the stack.</summary>
            [MethodImpl(MethodImplOptions.NoInlining)]
            static void WithResize(ref int[] stack, ref int pos, int arg0, int arg1, int arg2)
            {
                Array.Resize(ref stack, (pos + 2) * 2);
                StackPush(ref stack, ref pos, arg0, arg1, arg2);
            }
        }
        
        /// <summary>Pops 2 values from the backtracking stack.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static void StackPop(int[] stack, ref int pos, out int arg0, out int arg1)
        {
            arg0 = stack[--pos];
            arg1 = stack[--pos];
        }
    }
}
