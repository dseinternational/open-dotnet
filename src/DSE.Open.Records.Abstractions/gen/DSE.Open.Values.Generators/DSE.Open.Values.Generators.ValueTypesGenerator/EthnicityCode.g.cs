// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

#pragma warning disable CA2225 // Operator overloads have named alternates


namespace DSE.Open.Records;

[global::System.ComponentModel.TypeConverter(typeof(global::DSE.Open.Values.ValueTypeConverter<EthnicityCode, short>))]
public readonly partial struct EthnicityCode
{
    private readonly short _value;

    private EthnicityCode(short value, bool skipValidation = false)
    {
        if (!skipValidation)
        {
            EnsureIsValidValue(value);
        }

        _value = value;
    }

    private static void EnsureIsValidValue(short value)
    {
        if (!IsValidValue(value))
        {
            throw new global::System.ArgumentOutOfRangeException(nameof(value), value,
                $"'{value}' is not a valid {nameof(EthnicityCode)} value");
        }
    }

    public static bool TryFromValue(short value, out EthnicityCode result)
    {
        if (IsValidValue(value))
        {
            result = new EthnicityCode(value, true);
            return true;
        }
    
        result = default;
        return false;
    }

    public static EthnicityCode FromValue(short value)
    {
        EnsureIsValidValue(value);
        return new(value, true);
    }

    public static explicit operator EthnicityCode(short value)
        => FromValue(value);

    static short global::DSE.Open.IConvertibleTo<EthnicityCode, short>.ConvertTo(EthnicityCode value)
        => (short)value;

    public static implicit operator short(EthnicityCode value)
    {
        return value._value;
    }

    // IEquatable<T>

    public bool Equals(EthnicityCode other) => _value.Equals(other._value);

    public override bool Equals(object? obj) => obj is EthnicityCode other && Equals(other);

    public override int GetHashCode()
    {
        return _value.GetHashCode();
    }

    // IEqualityOperators<EthnicityCode, EthnicityCode, bool>

    public static bool operator ==(EthnicityCode left, EthnicityCode right) => left.Equals(right);
    
    public static bool operator !=(EthnicityCode left, EthnicityCode right) => !(left == right);

    // ISpanFormattable

    public bool TryFormat(
        global::System.Span<char> destination,
        out int charsWritten)
        => TryFormat(destination, out charsWritten, default, default);

    public bool TryFormatInvariant(
        global::System.Span<char> destination,
        out int charsWritten,
        global::System.Span<char> format)
        => TryFormat(destination, out charsWritten, format, global::System.Globalization.CultureInfo.InvariantCulture);

    public bool TryFormatInvariant(
        global::System.Span<char> destination,
        out int charsWritten)
        => TryFormatInvariant(destination, out charsWritten, default);

    /// <summary>
    /// Gets a representation of the EthnicityCode value as a string with default formatting options.
    /// </summary>
    /// <returns>
    /// A representation of the EthnicityCode value.
    /// </returns>
    public override string ToString()
    {
        return ToString(default, default);
    }

    // ISpanParsable<EthnicityCode>

    public static EthnicityCode Parse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider? provider)
        => global::DSE.Open.Values.ValueParser.Parse<EthnicityCode, short>(s, provider);

    public static EthnicityCode ParseInvariant(global::System.ReadOnlySpan<char> s)
        => Parse(s, global::System.Globalization.CultureInfo.InvariantCulture);

    // IParsable<EthnicityCode>

    public static EthnicityCode Parse(string s, global::System.IFormatProvider? provider)
        => global::DSE.Open.Values.ValueParser.Parse<EthnicityCode, short>(s, provider);

    public static EthnicityCode Parse(string s)
        => Parse(s, default);

    public static EthnicityCode ParseInvariant(string s)
        => Parse(s, global::System.Globalization.CultureInfo.InvariantCulture);

    public static bool TryParse(
        string? s,
        global::System.IFormatProvider? provider,
        out EthnicityCode result)
    {
        if (s is null)
        {
            result = default;
            return false;
        }
    
        return TryParse(global::System.MemoryExtensions.AsSpan(s), provider, out result);
    }

    public static bool TryParse(
        string? s,
        out EthnicityCode result)
        => TryParse(s, default, out result);

    public static bool TryParseInvariant(
        string? s,
        out EthnicityCode result)
        => TryParse(s, global::System.Globalization.CultureInfo.InvariantCulture, out result);

}

