// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

#pragma warning disable CA2225 // Operator overloads have named alternates


namespace DSE.Open.Values;

[global::System.ComponentModel.TypeConverter(typeof(global::DSE.Open.Values.ValueTypeConverter<Label, global::DSE.Open.CharSequence>))]
public readonly partial struct Label
{
    private readonly global::DSE.Open.CharSequence _value;

    private Label(global::DSE.Open.CharSequence value, bool skipValidation = false)
    {
        if (!skipValidation)
        {
            EnsureIsValidValue(value);
        }

        _value = value;
    }

    private static void EnsureIsValidValue(global::DSE.Open.CharSequence value)
    {
        if (!IsValidValue(value))
        {
            throw new global::System.ArgumentOutOfRangeException(nameof(value), value,
                $"'{value}' is not a valid {nameof(Label)} value");
        }
    }

    public static bool TryFromValue(global::DSE.Open.CharSequence value, out Label result)
    {
        if (IsValidValue(value))
        {
            result = new Label(value, true);
            return true;
        }
    
        result = default;
        return false;
    }

    public static Label FromValue(global::DSE.Open.CharSequence value)
    {
        EnsureIsValidValue(value);
        return new(value, true);
    }

    public static explicit operator Label(global::DSE.Open.CharSequence value)
        => FromValue(value);

    static global::DSE.Open.CharSequence global::DSE.Open.IConvertibleTo<Label, global::DSE.Open.CharSequence>.ConvertTo(Label value)
        => (global::DSE.Open.CharSequence)value;

    public static implicit operator global::DSE.Open.CharSequence(Label value)
    {
        return value._value;
    }

    // IEquatable<T>

    public bool Equals(Label other) => _value.Equals(other._value);

    public override bool Equals(object? obj) => obj is Label other && Equals(other);

    public override int GetHashCode()
    {
        return _value.GetHashCode();
    }

    // IEqualityOperators<Label, Label, bool>

    public static bool operator ==(Label left, Label right) => left.Equals(right);
    
    public static bool operator !=(Label left, Label right) => !(left == right);

    // ISpanFormattable

    public bool TryFormat(
        global::System.Span<char> destination,
        out int charsWritten,
        global::System.ReadOnlySpan<char> format,
        global::System.IFormatProvider? provider)
    {
        return ((global::System.ISpanFormattable)_value).TryFormat(destination, out charsWritten, format, provider);
    }

    public bool TryFormat(
        global::System.Span<char> destination,
        out int charsWritten)
        => TryFormat(destination, out charsWritten, default, default);

    public bool TryFormatInvariant(
        global::System.Span<char> destination,
        out int charsWritten,
        global::System.Span<char> format)
        => TryFormat(destination, out charsWritten, format, global::System.Globalization.CultureInfo.InvariantCulture);

    public bool TryFormatInvariant(
        global::System.Span<char> destination,
        out int charsWritten)
        => TryFormatInvariant(destination, out charsWritten, default);

    /// <summary>
    /// Gets a representation of the <see cref="Label"/> value as a string with formatting options.
    /// </summary>
    [global::System.Runtime.CompilerServices.SkipLocalsInit]
    public string ToString(string? format, global::System.IFormatProvider? formatProvider)
    {
        char[]? rented = null;
    
        try
        {
            global::System.Span<char> buffer = global::DSE.Open.Runtime.Helpers.MemoryThresholds.CanStackalloc<char>(MaxSerializedCharLength)
                ? stackalloc char[MaxSerializedCharLength]
                : (rented = global::System.Buffers.ArrayPool<char>.Shared.Rent(MaxSerializedCharLength));
    
            _ = TryFormat(buffer, out var charsWritten, format, formatProvider);
    
            return GetString(buffer[..charsWritten]);
        }
        finally
        {
            if (rented is not null)
            {
                global::System.Buffers.ArrayPool<char>.Shared.Return(rented);
            }
        }
    }

    public string ToStringInvariant(string? format)
    {
        return ToString(format, global::System.Globalization.CultureInfo.InvariantCulture);
    }

    public string ToStringInvariant()
    {
        return ToStringInvariant(default);
    }

    /// <summary>
    /// Gets a representation of the Label value as a string with default formatting options.
    /// </summary>
    /// <returns>
    /// A representation of the Label value.
    /// </returns>
    public override string ToString()
    {
        return ToString(default, default);
    }

    // ISpanParsable<Label>

    public static Label Parse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider? provider)
        => global::DSE.Open.Values.ValueParser.Parse<Label, global::DSE.Open.CharSequence>(s, provider);

    public static Label ParseInvariant(global::System.ReadOnlySpan<char> s)
        => Parse(s, global::System.Globalization.CultureInfo.InvariantCulture);

    public static bool TryParse(
        global::System.ReadOnlySpan<char> s,
        global::System.IFormatProvider? provider,
        out Label result)
        => global::DSE.Open.Values.ValueParser.TryParse<Label, global::DSE.Open.CharSequence>(s, provider, out result);

    public static bool TryParse(
        global::System.ReadOnlySpan<char> s,
        out Label result)
        => TryParse(s, default, out result);

    public static bool TryParseInvariant(
        global::System.ReadOnlySpan<char> s,
        out Label result)
        => TryParse(s, global::System.Globalization.CultureInfo.InvariantCulture, out result);

    // IParsable<Label>

    public static Label Parse(string s, global::System.IFormatProvider? provider)
        => global::DSE.Open.Values.ValueParser.Parse<Label, global::DSE.Open.CharSequence>(s, provider);

    public static Label Parse(string s)
        => Parse(s, default);

    public static Label ParseInvariant(string s)
        => Parse(s, global::System.Globalization.CultureInfo.InvariantCulture);

    public static bool TryParse(
        string? s,
        global::System.IFormatProvider? provider,
        out Label result)
    {
        if (s is null)
        {
            result = default;
            return false;
        }
    
        return TryParse(global::System.MemoryExtensions.AsSpan(s), provider, out result);
    }

    public static bool TryParse(
        string? s,
        out Label result)
        => TryParse(s, default, out result);

    public static bool TryParseInvariant(
        string? s,
        out Label result)
        => TryParse(s, global::System.Globalization.CultureInfo.InvariantCulture, out result);

    public int CompareTo(Label other)
    {
        return _value.CompareTo(other._value);
    }

    // IComparisonOperators<Label, Label, bool>

    public static bool operator <(Label left, Label right) => left.CompareTo(right) < 0;
    
    public static bool operator >(Label left, Label right) => left.CompareTo(right) > 0;
    
    public static bool operator <=(Label left, Label right) => left.CompareTo(right) <= 0;
    
    public static bool operator >=(Label left, Label right) => left.CompareTo(right) >= 0;

}

