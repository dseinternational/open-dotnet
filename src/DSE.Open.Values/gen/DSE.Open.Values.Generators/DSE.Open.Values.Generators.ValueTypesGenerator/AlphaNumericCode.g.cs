// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

#pragma warning disable CA2225 // Operator overloads have named alternates


using System;
using System.ComponentModel;
using DSE.Open.Runtime.Helpers;
using DSE.Open.Values;

namespace DSE.Open.Values;

[TypeConverter(typeof(global::DSE.Open.Values.ValueTypeConverter<AlphaNumericCode, AsciiString>))]
public readonly partial struct AlphaNumericCode
{
    private readonly AsciiString _value;

    private AlphaNumericCode(AsciiString value, bool skipValidation = false)
    {
        if (!skipValidation)
        {
            EnsureIsValidValue(value);
        }

        _value = value;
    }

    private static void EnsureIsValidValue(AsciiString value)
    {
        if (!IsValidValue(value))
        {
            throw new ArgumentOutOfRangeException(nameof(value), value,
                $"'{value}' is not a valid {nameof(AlphaNumericCode)} value");
        }
    }

    private void EnsureIsNotDefault()
    {
        UninitializedValueException<AlphaNumericCode, AsciiString>.ThrowIfUninitialized(this);
    }

    public static bool TryFromValue(AsciiString value, out AlphaNumericCode result)
    {
        if (IsValidValue(value))
        {
            result = new AlphaNumericCode(value, true);
            return true;
        }
    
        result = default;
        return false;
    }

    public static AlphaNumericCode FromValue(AsciiString value)
    {
        EnsureIsValidValue(value);
        return new(value, true);
    }

    public static explicit operator AlphaNumericCode(AsciiString value)
        => FromValue(value);

    static AsciiString global::DSE.Open.IConvertibleTo<AlphaNumericCode, AsciiString>.ConvertTo(AlphaNumericCode value)
        => (AsciiString)value;

    public static implicit operator AsciiString(AlphaNumericCode value)
    {
        value.EnsureIsNotDefault();
        return value._value;
    }

    // IEquatable<T>

    public bool Equals(AlphaNumericCode other) => _value.Equals(other._value);

    public override bool Equals(object? obj) => obj is AlphaNumericCode other && Equals(other);

    public override int GetHashCode()
    {
        EnsureIsNotDefault();
        return _value.GetHashCode();
    }

    // IEqualityOperators<AlphaNumericCode, AlphaNumericCode, bool>

    public static bool operator ==(AlphaNumericCode left, AlphaNumericCode right) => left.Equals(right);
    
    public static bool operator !=(AlphaNumericCode left, AlphaNumericCode right) => !(left == right);

    // ISpanFormattable

    public bool TryFormat(
        Span<char> destination,
        out int charsWritten,
        ReadOnlySpan<char> format,
        IFormatProvider? provider)
    {
        EnsureIsNotDefault();
        return ((ISpanFormattable)_value).TryFormat(destination, out charsWritten, format, provider);
    }

    public bool TryFormat(
        Span<char> destination,
        out int charsWritten)
        => TryFormat(destination, out charsWritten, default, default);

    public bool TryFormatInvariant(
        Span<char> destination,
        out int charsWritten,
        ReadOnlySpan<char> format)
        => TryFormat(destination, out charsWritten, format, System.Globalization.CultureInfo.InvariantCulture);

    public bool TryFormatInvariant(
        Span<char> destination,
        out int charsWritten)
        => TryFormatInvariant(destination, out charsWritten, default);

    /// <summary>
    /// Gets a representation of the <see cref="AlphaNumericCode"/> value as a string with formatting options.
    /// </summary>
    public string ToString(string? format, IFormatProvider? formatProvider)
    {
        EnsureIsNotDefault();

        char[]? rented = null;
    
        try
        {
            Span<char> buffer = MemoryThresholds.CanStackalloc<char>(MaxSerializedCharLength)
                ? stackalloc char[MaxSerializedCharLength]
                : (rented = System.Buffers.ArrayPool<char>.Shared.Rent(MaxSerializedCharLength));
    
            _ = TryFormat(buffer, out var charsWritten, format, formatProvider);
    
            return GetString(buffer[..charsWritten]);
        }
        finally
        {
            if (rented is not null)
            {
                System.Buffers.ArrayPool<char>.Shared.Return(rented);
            }
        }
    }

    public string ToStringInvariant(string? format)
    {
        return ToString(format, System.Globalization.CultureInfo.InvariantCulture);
    }

    public string ToStringInvariant()
    {
        return ToStringInvariant(default);
    }

    /// <summary>
    /// Gets a representation of the AlphaNumericCode value as a string with default formatting options.
    /// </summary>
    /// <returns>
    /// A representation of the AlphaNumericCode value.
    /// </returns>
    public override string ToString()
    {
        return ToString(default, default);
    }

    // ISpanParsable<AlphaNumericCode>

    public static AlphaNumericCode Parse(ReadOnlySpan<char> s, IFormatProvider? provider)
        => global::DSE.Open.Values.ValueParser.Parse<AlphaNumericCode, AsciiString>(s, provider);

    public static AlphaNumericCode ParseInvariant(ReadOnlySpan<char> s)
        => Parse(s, System.Globalization.CultureInfo.InvariantCulture);

    public static bool TryParse(
        ReadOnlySpan<char> s,
        IFormatProvider? provider,
        out AlphaNumericCode result)
        => global::DSE.Open.Values.ValueParser.TryParse<AlphaNumericCode, AsciiString>(s, provider, out result);

    public static bool TryParse(
        ReadOnlySpan<char> s,
        out AlphaNumericCode result)
        => TryParse(s, default, out result);

    public static bool TryParseInvariant(
        ReadOnlySpan<char> s,
        out AlphaNumericCode result)
        => TryParse(s, System.Globalization.CultureInfo.InvariantCulture, out result);

    // IParsable<AlphaNumericCode>

    public static AlphaNumericCode Parse(string s, IFormatProvider? provider)
        => global::DSE.Open.Values.ValueParser.Parse<AlphaNumericCode, AsciiString>(s, provider);

    public static AlphaNumericCode Parse(string s)
        => Parse(s, default);

    public static AlphaNumericCode ParseInvariant(string s)
        => Parse(s, System.Globalization.CultureInfo.InvariantCulture);

    public static bool TryParse(
        string? s,
        IFormatProvider? provider,
        out AlphaNumericCode result)
    {
        if (s is null)
        {
            result = default;
            return false;
        }
    
        return TryParse(s.AsSpan(), provider, out result);
    }

    public static bool TryParse(
        string? s,
        out AlphaNumericCode result)
        => TryParse(s, default, out result);

    public static bool TryParseInvariant(
        string? s,
        out AlphaNumericCode result)
        => TryParse(s, System.Globalization.CultureInfo.InvariantCulture, out result);

    // IUtf8SpanFormattable

    public bool TryFormat(
        Span<byte> utf8Destination,
        out int bytesWritten,
        ReadOnlySpan<char> format,
        IFormatProvider? provider)
        => ((IUtf8SpanFormattable)_value).TryFormat(utf8Destination, out bytesWritten, format, provider);

    // IUtf8SpanParsable<AlphaNumericCode>

    public static AlphaNumericCode Parse(
        ReadOnlySpan<byte> utf8Text,
        IFormatProvider? provider)
        => global::DSE.Open.Values.ValueParser.Parse<AlphaNumericCode, AsciiString>(utf8Text, provider);

    public static bool TryParse(
        ReadOnlySpan<byte> utf8Text,
        IFormatProvider? provider,
        out AlphaNumericCode result)
        => global::DSE.Open.Values.ValueParser.TryParse<AlphaNumericCode, AsciiString>(utf8Text, provider, out result);

    public int CompareTo(AlphaNumericCode other)
    {
        EnsureIsNotDefault();

        return _value.CompareTo(other._value);
    }

    // IComparisonOperators<AlphaNumericCode, AlphaNumericCode, bool>

    public static bool operator <(AlphaNumericCode left, AlphaNumericCode right) => left.CompareTo(right) < 0;
    
    public static bool operator >(AlphaNumericCode left, AlphaNumericCode right) => left.CompareTo(right) > 0;
    
    public static bool operator <=(AlphaNumericCode left, AlphaNumericCode right) => left.CompareTo(right) <= 0;
    
    public static bool operator >=(AlphaNumericCode left, AlphaNumericCode right) => left.CompareTo(right) >= 0;

}

