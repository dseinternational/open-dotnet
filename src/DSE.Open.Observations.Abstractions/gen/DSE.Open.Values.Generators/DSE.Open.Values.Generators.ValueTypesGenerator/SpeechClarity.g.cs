// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

#pragma warning disable CA2225 // Operator overloads have named alternates


namespace DSE.Open.Observations;

[global::System.ComponentModel.TypeConverter(typeof(global::DSE.Open.Values.ValueTypeConverter<SpeechClarity, byte>))]
public readonly partial struct SpeechClarity
{
    private readonly byte _value;

    private SpeechClarity(byte value, bool skipValidation = false)
    {
        if (!skipValidation)
        {
            EnsureIsValidValue(value);
        }

        _value = value;
    }

    private static void EnsureIsValidValue(byte value)
    {
        if (!IsValidValue(value))
        {
            throw new global::System.ArgumentOutOfRangeException(nameof(value), value,
                $"'{value}' is not a valid {nameof(SpeechClarity)} value");
        }
    }

    public static bool TryFromValue(byte value, out SpeechClarity result)
    {
        if (IsValidValue(value))
        {
            result = new SpeechClarity(value, true);
            return true;
        }
    
        result = default;
        return false;
    }

    public static SpeechClarity FromValue(byte value)
    {
        EnsureIsValidValue(value);
        return new(value, true);
    }

    public static explicit operator SpeechClarity(byte value)
        => FromValue(value);

    static byte global::DSE.Open.IConvertibleTo<SpeechClarity, byte>.ConvertTo(SpeechClarity value)
        => (byte)value;

    public static implicit operator byte(SpeechClarity value)
    {
        return value._value;
    }

    // IEquatable<T>

    public bool Equals(SpeechClarity other) => _value.Equals(other._value);

    public override bool Equals(object? obj) => obj is SpeechClarity other && Equals(other);

    public override int GetHashCode()
    {
        return _value.GetHashCode();
    }

    // IEqualityOperators<SpeechClarity, SpeechClarity, bool>

    public static bool operator ==(SpeechClarity left, SpeechClarity right) => left.Equals(right);
    
    public static bool operator !=(SpeechClarity left, SpeechClarity right) => !(left == right);

    // ISpanFormattable

    public bool TryFormat(
        global::System.Span<char> destination,
        out int charsWritten,
        global::System.ReadOnlySpan<char> format,
        global::System.IFormatProvider? provider)
    {
        return ((global::System.ISpanFormattable)_value).TryFormat(destination, out charsWritten, format, provider);
    }

    public bool TryFormat(
        global::System.Span<char> destination,
        out int charsWritten)
        => TryFormat(destination, out charsWritten, default, default);

    public bool TryFormatInvariant(
        global::System.Span<char> destination,
        out int charsWritten,
        global::System.Span<char> format)
        => TryFormat(destination, out charsWritten, format, global::System.Globalization.CultureInfo.InvariantCulture);

    public bool TryFormatInvariant(
        global::System.Span<char> destination,
        out int charsWritten)
        => TryFormatInvariant(destination, out charsWritten, default);

    /// <summary>
    /// Gets a representation of the <see cref="SpeechClarity"/> value as a string with formatting options.
    /// </summary>
    [global::System.Runtime.CompilerServices.SkipLocalsInit]
    public string ToString(string? format, global::System.IFormatProvider? formatProvider)
    {
        return ((global::System.IFormattable)_value).ToString(format, formatProvider);
    }

    public string ToStringInvariant(string? format)
    {
        return ToString(format, global::System.Globalization.CultureInfo.InvariantCulture);
    }

    public string ToStringInvariant()
    {
        return ToStringInvariant(default);
    }

    /// <summary>
    /// Gets a representation of the SpeechClarity value as a string with default formatting options.
    /// </summary>
    /// <returns>
    /// A representation of the SpeechClarity value.
    /// </returns>
    public override string ToString()
    {
        return ToString(default, default);
    }

    // ISpanParsable<SpeechClarity>

    public static SpeechClarity Parse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider? provider)
        => global::DSE.Open.Values.ValueParser.Parse<SpeechClarity, byte>(s, provider);

    public static SpeechClarity ParseInvariant(global::System.ReadOnlySpan<char> s)
        => Parse(s, global::System.Globalization.CultureInfo.InvariantCulture);

    public static bool TryParse(
        global::System.ReadOnlySpan<char> s,
        global::System.IFormatProvider? provider,
        out SpeechClarity result)
        => global::DSE.Open.Values.ValueParser.TryParse<SpeechClarity, byte>(s, provider, out result);

    public static bool TryParse(
        global::System.ReadOnlySpan<char> s,
        out SpeechClarity result)
        => TryParse(s, default, out result);

    public static bool TryParseInvariant(
        global::System.ReadOnlySpan<char> s,
        out SpeechClarity result)
        => TryParse(s, global::System.Globalization.CultureInfo.InvariantCulture, out result);

    // IParsable<SpeechClarity>

    public static SpeechClarity Parse(string s, global::System.IFormatProvider? provider)
        => global::DSE.Open.Values.ValueParser.Parse<SpeechClarity, byte>(s, provider);

    public static SpeechClarity Parse(string s)
        => Parse(s, default);

    public static SpeechClarity ParseInvariant(string s)
        => Parse(s, global::System.Globalization.CultureInfo.InvariantCulture);

    public static bool TryParse(
        string? s,
        global::System.IFormatProvider? provider,
        out SpeechClarity result)
    {
        if (s is null)
        {
            result = default;
            return false;
        }
    
        return TryParse(global::System.MemoryExtensions.AsSpan(s), provider, out result);
    }

    public static bool TryParse(
        string? s,
        out SpeechClarity result)
        => TryParse(s, default, out result);

    public static bool TryParseInvariant(
        string? s,
        out SpeechClarity result)
        => TryParse(s, global::System.Globalization.CultureInfo.InvariantCulture, out result);

    // IUtf8SpanFormattable

    public bool TryFormat(
        global::System.Span<byte> utf8Destination,
        out int bytesWritten,
        global::System.ReadOnlySpan<char> format,
        global::System.IFormatProvider? provider)
        => ((global::System.IUtf8SpanFormattable)_value).TryFormat(utf8Destination, out bytesWritten, format, provider);

    // IUtf8SpanParsable<SpeechClarity>

    public static SpeechClarity Parse(
        global::System.ReadOnlySpan<byte> utf8Source,
        global::System.IFormatProvider? provider)
        => global::DSE.Open.Values.ValueParser.Parse<SpeechClarity, byte>(utf8Source, provider);

    public static bool TryParse(
        global::System.ReadOnlySpan<byte> utf8Source,
        global::System.IFormatProvider? provider,
        out SpeechClarity result)
        => global::DSE.Open.Values.ValueParser.TryParse<SpeechClarity, byte>(utf8Source, provider, out result);

    public int CompareTo(SpeechClarity other)
    {
        return _value.CompareTo(other._value);
    }

    // IComparisonOperators<SpeechClarity, SpeechClarity, bool>

    public static bool operator <(SpeechClarity left, SpeechClarity right) => left.CompareTo(right) < 0;
    
    public static bool operator >(SpeechClarity left, SpeechClarity right) => left.CompareTo(right) > 0;
    
    public static bool operator <=(SpeechClarity left, SpeechClarity right) => left.CompareTo(right) <= 0;
    
    public static bool operator >=(SpeechClarity left, SpeechClarity right) => left.CompareTo(right) >= 0;

}

